export const algorithmContent: Record<
  string,
  {
    title: string
    explanation: string
    quiz: {
      question: string
      options: string[]
      correct: number
    }
  }
> = {
  "bubble-sort": {
    title: "Bubble Sort",
    explanation: `
      <h3 class="text-xl font-bold text-indigo-600 mb-3">ü´ß Bubble Sort</h3>
      <p class="mb-4">O Bubble Sort √© um algoritmo de ordena√ß√£o simples que compara elementos adjacentes e os troca se estiverem na ordem errada.</p>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚ö° Complexidade:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li><strong>Tempo:</strong> O(n¬≤) no pior caso</li>
        <li><strong>Espa√ßo:</strong> O(1) - ordena in-place</li>
      </ul>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üîÑ Como funciona:</h3>
      <ol class="list-decimal list-inside mb-4 space-y-1">
        <li>Compare cada par de elementos adjacentes</li>
        <li>Troque-os se estiverem fora de ordem</li>
        <li>Repita at√© que n√£o haja mais trocas</li>
      </ol>
    `,
    quiz: {
      question: "Qual √© a complexidade de tempo do Bubble Sort no pior caso?",
      options: ["O(n)", "O(n log n)", "O(n¬≤)", "O(2‚Åø)"],
      correct: 2,
    },
  },

  "merge-sort": {
    title: "Merge Sort",
    explanation: `
      <h3 class="text-xl font-bold text-indigo-600 mb-3">üîÑ Merge Sort</h3>
      <p class="mb-4">O Merge Sort √© um algoritmo de ordena√ß√£o eficiente que usa a estrat√©gia "dividir para conquistar".</p>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚ö° Complexidade:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li><strong>Tempo:</strong> O(n log n) sempre</li>
        <li><strong>Espa√ßo:</strong> O(n) - precisa de espa√ßo adicional</li>
      </ul>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üîÑ Como funciona:</h3>
      <ol class="list-decimal list-inside mb-4 space-y-1">
        <li>Divida o array pela metade recursivamente</li>
        <li>Ordene cada metade separadamente</li>
        <li>Combine (merge) as partes ordenadas</li>
      </ol>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚úÖ Vantagens:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li>Complexidade est√°vel O(n log n)</li>
        <li>Algoritmo est√°vel (mant√©m ordem de elementos iguais)</li>
        <li>Boa para grandes datasets</li>
      </ul>
    `,
    quiz: {
      question: "Qual estrat√©gia o Merge Sort utiliza?",
      options: ["For√ßa bruta", "Dividir para conquistar", "Algoritmo guloso", "Backtracking"],
      correct: 1,
    },
  },

  "quick-sort": {
    title: "Quick Sort",
    explanation: `
      <h3 class="text-xl font-bold text-indigo-600 mb-3">‚ö° Quick Sort</h3>
      <p class="mb-4">O Quick Sort √© um algoritmo de ordena√ß√£o eficiente que usa a estrat√©gia "dividir para conquistar".</p>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚ö° Complexidade:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li><strong>Tempo:</strong> O(n log n) no caso m√©dio, O(n¬≤) no pior caso</li>
        <li><strong>Espa√ßo:</strong> O(log n) - ordena in-place</li>
      </ul>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üîÑ Como funciona:</h3>
      <ol class="list-decimal list-inside mb-4 space-y-1">
        <li>Escolha um elemento como piv√¥</li>
        <li>Particione o array em elementos menores e maiores que o piv√¥</li>
        <li>Ordene recursivamente as parti√ß√µes</li>
      </ol>
    `,
    quiz: {
      question: "Qual √© a complexidade m√©dia do Quick Sort?",
      options: ["O(n)", "O(n log n)", "O(n¬≤)", "O(2‚Åø)"],
      correct: 1,
    },
  },

  bfs: {
    title: "Busca em Largura (BFS)",
    explanation: `
      <h3 class="text-xl font-bold text-indigo-600 mb-3">üåä Busca em Largura (BFS)</h3>
      <p class="mb-4">A BFS explora um grafo visitando todos os n√≥s de um n√≠vel antes de passar para o pr√≥ximo n√≠vel.</p>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚ö° Complexidade:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li><strong>Tempo:</strong> O(V + E) onde V = v√©rtices, E = arestas</li>
        <li><strong>Espa√ßo:</strong> O(V) para a fila e marca√ß√£o</li>
      </ul>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üîÑ Como funciona:</h3>
      <ol class="list-decimal list-inside mb-4 space-y-1">
        <li>Comece com um n√≥ inicial e marque como visitado</li>
        <li>Adicione todos os vizinhos n√£o visitados √† fila</li>
        <li>Processe o pr√≥ximo n√≥ da fila</li>
        <li>Repita at√© a fila estar vazia</li>
      </ol>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üéØ Aplica√ß√µes:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li>Encontrar o caminho mais curto (grafos n√£o ponderados)</li>
        <li>Verificar conectividade</li>
        <li>Resolver puzzles e labirintos</li>
      </ul>
    `,
    quiz: {
      question: "Qual estrutura de dados a BFS utiliza internamente?",
      options: ["Pilha", "Fila", "√Årvore", "Hash Table"],
      correct: 1,
    },
  },

  dfs: {
    title: "Busca em Profundidade (DFS)",
    explanation: `
      <h3 class="text-xl font-bold text-indigo-600 mb-3">üå≥ Busca em Profundidade (DFS)</h3>
      <p class="mb-4">A DFS explora um grafo seguindo um caminho at√© o fim antes de retroceder.</p>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚ö° Complexidade:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li><strong>Tempo:</strong> O(V + E) onde V = v√©rtices, E = arestas</li>
        <li><strong>Espa√ßo:</strong> O(V) para a pilha e marca√ß√£o</li>
      </ul>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üîÑ Como funciona:</h3>
      <ol class="list-decimal list-inside mb-4 space-y-1">
        <li>Comece com um n√≥ inicial e marque como visitado</li>
        <li>Visite um vizinho n√£o visitado</li>
        <li>Repita at√© n√£o haver mais vizinhos n√£o visitados</li>
        <li>Retroceda (backtrack) e repita</li>
      </ol>
    `,
    quiz: {
      question: "Qual estrutura de dados a DFS utiliza internamente?",
      options: ["Pilha", "Fila", "√Årvore", "Hash Table"],
      correct: 0,
    },
  },

  dijkstra: {
    title: "Algoritmo de Dijkstra",
    explanation: `
      <h3 class="text-xl font-bold text-indigo-600 mb-3">üõ£Ô∏è Algoritmo de Dijkstra</h3>
      <p class="mb-4">O algoritmo de Dijkstra encontra o caminho mais curto entre um n√≥ inicial e todos os outros n√≥s em um grafo ponderado.</p>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚ö° Complexidade:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li><strong>Tempo:</strong> O(V¬≤) na implementa√ß√£o simples</li>
        <li><strong>Espa√ßo:</strong> O(V) para armazenar dist√¢ncias</li>
      </ul>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üîÑ Como funciona:</h3>
      <ol class="list-decimal list-inside mb-4 space-y-1">
        <li>Atribua dist√¢ncia zero ao n√≥ inicial e infinito aos outros</li>
        <li>Selecione o n√≥ com menor dist√¢ncia n√£o visitado</li>
        <li>Atualize as dist√¢ncias dos vizinhos</li>
        <li>Repita at√© todos os n√≥s serem visitados</li>
      </ol>
    `,
    quiz: {
      question: "O algoritmo de Dijkstra funciona com pesos negativos?",
      options: ["Sim, sempre", "N√£o, nunca", "Depende do grafo", "S√≥ se n√£o houver ciclos"],
      correct: 1,
    },
  },

  "binary-tree": {
    title: "√Årvore Bin√°ria",
    explanation: `
      <h3 class="text-xl font-bold text-indigo-600 mb-3">üå≥ √Årvore Bin√°ria</h3>
      <p class="mb-4">Uma √°rvore bin√°ria √© uma estrutura de dados onde cada n√≥ tem no m√°ximo dois filhos.</p>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚ö° Caracter√≠sticas:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li>Cada n√≥ tem 0, 1 ou 2 filhos</li>
        <li>Filhos s√£o chamados de esquerda e direita</li>
        <li>Pode ser usada para busca eficiente (BST)</li>
      </ul>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üîÑ Percursos:</h3>
      <ol class="list-decimal list-inside mb-4 space-y-1">
        <li><strong>Pr√©-ordem:</strong> Raiz, Esquerda, Direita</li>
        <li><strong>Em-ordem:</strong> Esquerda, Raiz, Direita</li>
        <li><strong>P√≥s-ordem:</strong> Esquerda, Direita, Raiz</li>
      </ol>
    `,
    quiz: {
      question: "Quantos filhos no m√°ximo um n√≥ em uma √°rvore bin√°ria pode ter?",
      options: ["1", "2", "3", "Nenhuma das anteriores"],
      correct: 1,
    },
  },

  "avl-tree": {
    title: "√Årvore AVL",
    explanation: `
      <h3 class="text-xl font-bold text-indigo-600 mb-3">üå¥ √Årvore AVL</h3>
      <p class="mb-4">Uma √°rvore AVL √© uma √°rvore bin√°ria de busca auto-balanceada.</p>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚ö° Caracter√≠sticas:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li>Altura das sub√°rvores difere no m√°ximo em 1</li>
        <li>Opera√ß√µes garantem O(log n) no pior caso</li>
        <li>Usa rota√ß√µes para manter o balanceamento</li>
      </ul>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üîÑ Rota√ß√µes:</h3>
      <ol class="list-decimal list-inside mb-4 space-y-1">
        <li><strong>Simples √† direita</strong></li>
        <li><strong>Simples √† esquerda</strong></li>
        <li><strong>Dupla direita-esquerda</strong></li>
        <li><strong>Dupla esquerda-direita</strong></li>
      </ol>
    `,
    quiz: {
      question: "Qual √© a principal vantagem da √°rvore AVL sobre uma BST comum?",
      options: [
        "Menor uso de mem√≥ria",
        "Balanceamento autom√°tico",
        "Suporte a mais tipos de dados",
        "Implementa√ß√£o mais simples",
      ],
      correct: 1,
    },
  },

  knapsack: {
    title: "Problema da Mochila",
    explanation: `
      <h3 class="text-xl font-bold text-indigo-600 mb-3">üéí Problema da Mochila</h3>
      <p class="mb-4">Dado um conjunto de itens com pesos e valores, determine o subconjunto de maior valor que cabe na mochila.</p>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚ö° Abordagens:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li><strong>For√ßa bruta:</strong> O(2‚Åø) - testa todas as combina√ß√µes</li>
        <li><strong>Programa√ß√£o din√¢mica:</strong> O(nW) - mais eficiente</li>
      </ul>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üîÑ Solu√ß√£o DP:</h3>
      <ol class="list-decimal list-inside mb-4 space-y-1">
        <li>Crie uma tabela para armazenar solu√ß√µes parciais</li>
        <li>Preencha a tabela iterativamente</li>
        <li>Use a tabela para reconstruir a solu√ß√£o</li>
      </ol>
    `,
    quiz: {
      question: "Qual √© a complexidade da solu√ß√£o de programa√ß√£o din√¢mica para o problema da mochila?",
      options: ["O(n)", "O(n log n)", "O(nW)", "O(2‚Åø)"],
      correct: 2,
    },
  },

  fibonacci: {
    title: "Sequ√™ncia de Fibonacci",
    explanation: `
      <h3 class="text-xl font-bold text-indigo-600 mb-3">üêá Sequ√™ncia de Fibonacci</h3>
      <p class="mb-4">Cada n√∫mero √© a soma dos dois anteriores: 0, 1, 1, 2, 3, 5, 8, 13...</p>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">‚ö° Implementa√ß√µes:</h3>
      <ul class="list-disc list-inside mb-4 space-y-1">
        <li><strong>Recursiva:</strong> O(2‚Åø) - exponencial</li>
        <li><strong>DP (bottom-up):</strong> O(n) - linear</li>
        <li><strong>Matriz:</strong> O(log n) - mais eficiente</li>
      </ul>
      
      <h3 class="text-lg font-bold text-indigo-600 mb-3">üîÑ Aplica√ß√µes:</h3>
      <ol class="list-decimal list-inside mb-4 space-y-1">
        <li>An√°lise de algoritmos</li>
        <li>Design de sistemas</li>
        <li>Modelagem de crescimento populacional</li>
      </ol>
    `,
    quiz: {
      question: "Qual √© o pr√≥ximo n√∫mero na sequ√™ncia: 0, 1, 1, 2, 3, 5, 8?",
      options: ["10", "11", "12", "13"],
      correct: 3,
    },
  },
}
